{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const fetchValue = useRef(); // console.log(fetchValue);\n\n  const [enteredName, setEnterednName] = useState(\"\"); // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(); // use one more state to check if the form is valid \n  // if one field is not correct means it is invalid\n\n  const [formIsValid, setFormIsValid] = useState(false);\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched; // using useffect that depends on enteredName is valid or not\n\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid]); // on change handler\n\n  const nameInputChangeHandler = event => {\n    setEnterednName(event.target.value);\n  }; // condition on blur\n\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  }; // form- submission\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnterednName(\"\");\n    setEnteredNameTouched(false); //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: fetchValue,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"B/OqB/bKFYl2q2uK5+MerI8Czds=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","SimpleInput","props","fetchValue","enteredName","setEnterednName","enteredNameTouched","setEnteredNameTouched","formIsValid","setFormIsValid","enteredNameIsValid","trim","nameInputIsInvalid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputClasses"],"sources":["D:/React_forms/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n  const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState();\n\n  // use one more state to check if the form is valid \n  // if one field is not correct means it is invalid\n\n  const [formIsValid, setFormIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  \n\n  // using useffect that depends on enteredName is valid or not\n  useEffect(() => {\n    if (enteredNameIsValid) {\n      setFormIsValid(true);\n    } else {\n      setFormIsValid(false);\n    }\n  }, [enteredNameIsValid]);\n\n  // on change handler\n\n  const nameInputChangeHandler = (event) => {\n    setEnterednName(event.target.value);\n  };\n\n  // condition on blur\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (!enteredNameIsValid) {\n      return;\n    }\n\n    setEnterednName(\"\");\n    setEnteredNameTouched(false);\n\n    //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          ref={fetchValue}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,UAAU,GAAGJ,MAAM,EAAzB,CAD6B,CAE7B;;EAEA,MAAM,CAACK,WAAD,EAAcC,eAAd,IAAiCL,QAAQ,CAAC,EAAD,CAA/C,CAJ6B,CAK7B;;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,EAA5D,CAN6B,CAQ7B;EACA;;EAEA,MAAM,CAACQ,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;EAEA,MAAMU,kBAAkB,GAAGN,WAAW,CAACO,IAAZ,OAAuB,EAAlD;EACA,MAAMC,kBAAkB,GAAG,CAACF,kBAAD,IAAuBJ,kBAAlD,CAd6B,CAiB7B;;EACAR,SAAS,CAAC,MAAM;IACd,IAAIY,kBAAJ,EAAwB;MACtBD,cAAc,CAAC,IAAD,CAAd;IACD,CAFD,MAEO;MACLA,cAAc,CAAC,KAAD,CAAd;IACD;EACF,CANQ,EAMN,CAACC,kBAAD,CANM,CAAT,CAlB6B,CA0B7B;;EAEA,MAAMG,sBAAsB,GAAIC,KAAD,IAAW;IACxCT,eAAe,CAACS,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;EACD,CAFD,CA5B6B,CAgC7B;;;EACA,MAAMC,oBAAoB,GAAIH,KAAD,IAAW;IACtCP,qBAAqB,CAAC,IAAD,CAArB;EACD,CAFD,CAjC6B,CAuC7B;;;EACA,MAAMW,qBAAqB,GAAIJ,KAAD,IAAW;IACvCA,KAAK,CAACK,cAAN;IACAZ,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAI,CAACG,kBAAL,EAAyB;MACvB;IACD;;IAEDL,eAAe,CAAC,EAAD,CAAf;IACAE,qBAAqB,CAAC,KAAD,CAArB,CATuC,CAWvC;IACA;IACA;IACA;EACD,CAfD;;EAiBA,MAAMa,gBAAgB,GAAGR,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEM,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEE,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,GAAG,EAAEjB,UAHP;QAIE,QAAQ,EAAEU,sBAJZ;QAKE,MAAM,EAAEI,oBALV;QAME,KAAK,EAAEb;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGQ,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAQ,QAAQ,EAAE,CAACJ,WAAnB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAlFD;;GAAMP,W;;KAAAA,W;AAoFN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}