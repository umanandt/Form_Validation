{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const fetchValue = useRef(); // console.log(fetchValue);\n\n  const [enteredName, setEnterednName] = useState(\"\"); // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState();\n  const enteredNameIsValid = enteredName ? true : false; // on change handler\n\n  const nameInputChangeHandler = event => {\n    setEnterednName(event.target.value);\n\n    if (event.target.value.trim() !== \"\") {\n      setEnterednNameIsValid(true);\n    }\n  }; // condition on blur\n\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnterednNameIsValid(false);\n    }\n  }; // form- submission\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnterednNameIsValid(false);\n    }\n\n    setEnterednNameIsValid(true); // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: fetchValue,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"XgxuRaPGBjziwdWSq0ZPdq3qWzE=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useEffect","useRef","useState","SimpleInput","props","fetchValue","enteredName","setEnterednName","enteredNameTouched","setEnteredNameTouched","enteredNameIsValid","nameInputChangeHandler","event","target","value","trim","setEnterednNameIsValid","nameInputBlurHandler","formSubmissionHandler","preventDefault","nameInputIsInvalid","nameInputClasses"],"sources":["D:/React_forms/src/components/SimpleInput.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n\n  const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState();\n\n  const enteredNameIsValid = enteredName ? true : false;\n\n\n  // on change handler\n\n  const nameInputChangeHandler = (event) => {\n    setEnterednName(event.target.value);\n    if (event.target.value.trim() !== \"\") {\n      setEnterednNameIsValid(true);\n    }\n  };\n\n\n  \n  // condition on blur\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n    if (enteredName.trim() === \"\") {\n      setEnterednNameIsValid(false);\n    }\n  };\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n\n    if (enteredName.trim() === \"\") {\n      setEnterednNameIsValid(false);\n    }\n\n    setEnterednNameIsValid(true);\n\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          ref={fetchValue}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n      <div className=\"form-actions\">\n        <button>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,MAApB,EAA4BC,QAA5B,QAA4C,OAA5C;;;AAEA,MAAMC,WAAW,GAAIC,KAAD,IAAW;EAAA;;EAC7B,MAAMC,UAAU,GAAGJ,MAAM,EAAzB,CAD6B,CAE7B;;EAGA,MAAM,CAACK,WAAD,EAAcC,eAAd,IAAiCL,QAAQ,CAAC,EAAD,CAA/C,CAL6B,CAM7B;;EACA,MAAM,CAACM,kBAAD,EAAqBC,qBAArB,IAA8CP,QAAQ,EAA5D;EAEA,MAAMQ,kBAAkB,GAAGJ,WAAW,GAAG,IAAH,GAAU,KAAhD,CAT6B,CAY7B;;EAEA,MAAMK,sBAAsB,GAAIC,KAAD,IAAW;IACxCL,eAAe,CAACK,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAf;;IACA,IAAIF,KAAK,CAACC,MAAN,CAAaC,KAAb,CAAmBC,IAAnB,OAA8B,EAAlC,EAAsC;MACpCC,sBAAsB,CAAC,IAAD,CAAtB;IACD;EACF,CALD,CAd6B,CAuB7B;;;EACA,MAAMC,oBAAoB,GAAIL,KAAD,IAAW;IACtCH,qBAAqB,CAAC,IAAD,CAArB;;IACA,IAAIH,WAAW,CAACS,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BC,sBAAsB,CAAC,KAAD,CAAtB;IACD;EACF,CALD,CAxB6B,CA+B7B;;;EACA,MAAME,qBAAqB,GAAIN,KAAD,IAAW;IACvCA,KAAK,CAACO,cAAN;IACAV,qBAAqB,CAAC,IAAD,CAArB;;IAEA,IAAIH,WAAW,CAACS,IAAZ,OAAuB,EAA3B,EAA+B;MAC7BC,sBAAsB,CAAC,KAAD,CAAtB;IACD;;IAEDA,sBAAsB,CAAC,IAAD,CAAtB,CARuC,CAUvC;IACA;IACA;EACD,CAbD;;EAeA,MAAMI,kBAAkB,GAAG,CAACV,kBAAD,IAAuBF,kBAAlD;EACA,MAAMa,gBAAgB,GAAGD,kBAAkB,GACvC,sBADuC,GAEvC,cAFJ;EAIA,oBACE;IAAM,QAAQ,EAAEF,qBAAhB;IAAA,wBACE;MAAK,SAAS,EAAEG,gBAAhB;MAAA,wBACE;QAAO,OAAO,EAAC,MAAf;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAEE;QACE,IAAI,EAAC,MADP;QAEE,EAAE,EAAC,MAFL;QAGE,GAAG,EAAEhB,UAHP;QAIE,QAAQ,EAAEM,sBAJZ;QAKE,MAAM,EAAEM,oBALV;QAME,KAAK,EAAEX;MANT;QAAA;QAAA;QAAA;MAAA,QAFF,EAUGc,kBAAkB,iBACjB;QAAG,SAAS,EAAC,YAAb;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAeE;MAAK,SAAS,EAAC,cAAf;MAAA,uBACE;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA,QAfF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAqBD,CAzED;;GAAMjB,W;;KAAAA,W;AA2EN,eAAeA,WAAf"},"metadata":{},"sourceType":"module"}