{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  const fetchValue = useRef(); // console.log(fetchValue);\n\n  const [enteredName, setEnterednName] = useState(\"\"); // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n\n  const [enteredNameTouched, setEnteredNameTouched] = useState(); // email state\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(); // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false; // on Input Name handler\n\n  const nameInputChangeHandler = event => {\n    setEnterednName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  }; // on Email handler\n\n\n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n\n    if (event.target.value.match(mailFormat)) {\n      emailFormat = true;\n    }\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const emailInputisRight = emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && emailInputisRight) {\n    formIsValid = true;\n  } // form- submission\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree) {\n      return;\n    }\n\n    setEnterednName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false); //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: fetchValue,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), emailInputisRight && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"D/2K3gn3pSHqIzq8Rl5MFH9hC20=\");\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","SimpleInput","props","fetchValue","enteredName","setEnterednName","enteredNameTouched","setEnteredNameTouched","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","enteredNameIsValid","trim","nameInputIsInvalid","formIsValid","nameInputChangeHandler","event","target","value","nameInputBlurHandler","emailFormat","enteredEmailIsSpaceFree","mailFormat","emailInputChangeHandler","match","emailInputBlurHandler","emailInputisRight","formSubmissionHandler","preventDefault","nameInputClasses","emailInputClasses"],"sources":["D:/React_forms/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\n\nconst SimpleInput = (props) => {\n  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n  const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  const [enteredNameTouched, setEnteredNameTouched] = useState();\n\n  // email state\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState();\n\n  // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n\n  const enteredNameIsValid = enteredName.trim() !== \"\";\n  const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false;\n  \n \n  // on Input Name handler\n  const nameInputChangeHandler = (event) => {\n    setEnterednName(event.target.value);\n  };\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  // on Email handler\n  \n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n      if (event.target.value.match(mailFormat)) {\n        emailFormat = true;\n      }\n  };\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n\n  };\n\n  \n  \n  \n\n  const emailInputisRight = emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && emailInputisRight) {\n    formIsValid = true;\n  }\n\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree) {\n      return;\n    }\n\n    setEnterednName(\"\");\n    setEnteredNameTouched(false);\n\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n\n    //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n\n    const emailInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          ref={fetchValue}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      {/* email INPUT*/}\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputisRight && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}