{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useReducer } from \"react\";\nconst initialInputState = {\n  value: \"\",\n  isTouched: false\n};\n\nconst inputStateReducer = (state, action) => {\n  return inputStateReducer;\n};\n\nconst useInput = validateValue => {\n  _s();\n\n  //  const [enteredValue, setEnteredValue] = useState(\"\");\n  //  const [isTouched, setIsTouched] = useState(false);\n  // here I am using reducer which gets two value first one consist \n  // state and action and the other one gets the initial value.\n  const [inputState, dispatch] = useReducer(inputStateReducer, initialInputState);\n  const valueIsValid = validateValue(inputState.value);\n  const hasError = !valueIsValid && inputState.isTouched;\n  {\n    /*const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n    };\r\n    const inputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n    };*/\n  }\n\n  const valueChangeHandler = event => {\n    dispatch({\n      type: 'INPUT',\n      value: event.target.value\n    });\n  };\n\n  const inputBlurHandler = event => {\n    dispatch({\n      type: 'BLUR'\n    });\n  };\n\n  const reset = () => {\n    //  setEnteredValue(\"\");\n    //  setIsTouched(false);\n    dispatch({\n      type: 'RESET'\n    });\n  };\n\n  return {\n    value: enteredValue,\n    isValid: valueIsValid,\n    hasError,\n    valueChangeHandler,\n    inputBlurHandler,\n    reset\n  };\n};\n\n_s(useInput, \"gvJkPEQ6Ju5turm8Oo71bK8W7Zk=\");\n\nexport default useInput;","map":{"version":3,"names":["useReducer","initialInputState","value","isTouched","inputStateReducer","state","action","useInput","validateValue","inputState","dispatch","valueIsValid","hasError","valueChangeHandler","event","type","target","inputBlurHandler","reset","enteredValue","isValid"],"sources":["D:/React_forms/src/hooks/use-input.js"],"sourcesContent":["import { useReducer } from \"react\";\r\n\r\nconst initialInputState = {\r\n  value: \"\",\r\n  isTouched: false,\r\n};\r\n\r\nconst inputStateReducer = (state, action) => {\r\n  return inputStateReducer;\r\n};\r\n\r\nconst useInput = (validateValue) => {\r\n\r\n  //  const [enteredValue, setEnteredValue] = useState(\"\");\r\n  //  const [isTouched, setIsTouched] = useState(false);\r\n\r\n\r\n  // here I am using reducer which gets two value first one consist \r\n  // state and action and the other one gets the initial value.\r\n\r\n\r\n  const [inputState, dispatch] = useReducer(\r\n    inputStateReducer,\r\n    initialInputState\r\n  );\r\n\r\n  const valueIsValid = validateValue(inputState.value);\r\n  const hasError = !valueIsValid && inputState.isTouched;\r\n\r\n  { /*const valueChangeHandler = (event) => {\r\n    setEnteredValue(event.target.value);\r\n  };\r\n\r\n  const inputBlurHandler = (event) => {\r\n    setIsTouched(true);\r\n  };*/}\r\n\r\n  const valueChangeHandler = (event) => {\r\n   dispatch({type: 'INPUT', value: event.target.value})\r\n  };\r\n\r\n  const inputBlurHandler = (event) => {\r\n    dispatch({type: 'BLUR'});\r\n  }\r\n\r\n  const reset = () => {\r\n  //  setEnteredValue(\"\");\r\n  //  setIsTouched(false);\r\n\r\n  dispatch({type: 'RESET'});\r\n  };\r\n\r\n  return {\r\n    value: enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n    reset,\r\n  };\r\n};\r\n\r\nexport default useInput;\r\n"],"mappings":";;AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,MAAMC,iBAAiB,GAAG;EACxBC,KAAK,EAAE,EADiB;EAExBC,SAAS,EAAE;AAFa,CAA1B;;AAKA,MAAMC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;EAC3C,OAAOF,iBAAP;AACD,CAFD;;AAIA,MAAMG,QAAQ,GAAIC,aAAD,IAAmB;EAAA;;EAElC;EACA;EAGA;EACA;EAGA,MAAM,CAACC,UAAD,EAAaC,QAAb,IAAyBV,UAAU,CACvCI,iBADuC,EAEvCH,iBAFuC,CAAzC;EAKA,MAAMU,YAAY,GAAGH,aAAa,CAACC,UAAU,CAACP,KAAZ,CAAlC;EACA,MAAMU,QAAQ,GAAG,CAACD,YAAD,IAAiBF,UAAU,CAACN,SAA7C;EAEA;IAAE;AACJ;AACA;AACA;AACA;AACA;EACO;;EAEL,MAAMU,kBAAkB,GAAIC,KAAD,IAAW;IACrCJ,QAAQ,CAAC;MAACK,IAAI,EAAE,OAAP;MAAgBb,KAAK,EAAEY,KAAK,CAACE,MAAN,CAAad;IAApC,CAAD,CAAR;EACA,CAFD;;EAIA,MAAMe,gBAAgB,GAAIH,KAAD,IAAW;IAClCJ,QAAQ,CAAC;MAACK,IAAI,EAAE;IAAP,CAAD,CAAR;EACD,CAFD;;EAIA,MAAMG,KAAK,GAAG,MAAM;IACpB;IACA;IAEAR,QAAQ,CAAC;MAACK,IAAI,EAAE;IAAP,CAAD,CAAR;EACC,CALD;;EAOA,OAAO;IACLb,KAAK,EAAEiB,YADF;IAELC,OAAO,EAAET,YAFJ;IAGLC,QAHK;IAILC,kBAJK;IAKLI,gBALK;IAMLC;EANK,CAAP;AAQD,CAjDD;;GAAMX,Q;;AAmDN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}