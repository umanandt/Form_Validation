{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // I am using custom hooks that's why commenting out existing states\n  const {\n    value: enteredName,\n    //alias\n    isValid: enteredNameIsValid,\n    //alias\n    hasError: nameInputHasError,\n    //alias\n    valueChangeHandler: nameChangeHandler,\n    //alias\n    inputBlurHandler: nameBlurHandler,\n    //alias\n    reset: resetNameInput\n  } = useInput(value => value.trim() !== '');\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const {\n    value: enteredEmail,\n    //alias\n    isValid: enteredEmailIsValid,\n    //alias\n    hasError: emailInputHasError,\n    //alias\n    valueChangeHandler: emailChangeHandler,\n    //alias\n    inputBlurHandler: emailBlurHandler,\n    //alias\n    reset: resetEmailInput\n  } = useInput(value = () => {\n    if (value.match(mailFormat)) {\n      emailFormat = true;\n    }\n  }); //  const fetchValue = useRef();\n  // console.log(fetchValue);\n  // Name State\n  // const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // email state\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n  // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n  //const enteredNameIsValid = enteredName.trim() !== \"\";\n  //const nameInputIsnvalid = !enteredNameIsValid && enteredNameTouched;\n\n  let formIsValid = false; // on Input Name handler\n  // const nameInputChangeHandler = (event) => {\n  //  setEnterednName(event.target.value);\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n  // on Email handler\n\n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\"; // const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  // const emailInputChangeHandler = (event) => {\n  //  setEnteredEmail(event.target.value);\n  //  if (event.target.value.match(mailFormat)) {\n  //    emailFormat = true;\n  //  }\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //  setEnteredEmailTouched(true);\n  // };\n\n  const emailBoxEmptyTouched = enteredEmailTouched && !enteredEmailIsSpaceFree;\n  const emailInputisRight = emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && enteredEmailIsSpaceFree) {\n    formIsValid = true;\n  } // form- submission\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault(); //setEnteredNameTouched(true);\n\n    nameBlurHandler();\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree && !emailInputisRight) {\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName); // setEnterednName(\"\");\n    // setEnteredNameTouched(false);\n\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false); //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputHasError ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailBoxEmptyTouched ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        onChange: nameChangeHandler,\n        onBlur: nameBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), nameInputHasError && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }, this), emailBoxEmptyTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"aql8rKgpT/VugmqKfaINYlyKs90=\", false, function () {\n  return [useInput, useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlurHandler","reset","resetNameInput","trim","mailFormat","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurHandler","resetEmailInput","match","emailFormat","formIsValid","enteredEmailIsSpaceFree","emailBoxEmptyTouched","enteredEmailTouched","emailInputisRight","formSubmissionHandler","event","preventDefault","setEnteredEmailTouched","console","log","setEnteredEmail","nameInputClasses","emailInputClasses","emailInputChangeHandler","emailInputBlurHandler"],"sources":["D:/React_forms/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  // I am using custom hooks that's why commenting out existing states\n\n  const {\n    value: enteredName, //alias\n    isValid: enteredNameIsValid,   //alias\n    hasError: nameInputHasError, //alias\n    valueChangeHandler: nameChangeHandler, //alias\n    inputBlurHandler: nameBlurHandler,//alias\n    reset: resetNameInput,\n  } = useInput(value => value.trim() !== '');\n\n\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const {\n    value: enteredEmail, //alias\n    isValid: enteredEmailIsValid,   //alias\n    hasError: emailInputHasError, //alias\n    valueChangeHandler: emailChangeHandler, //alias\n    inputBlurHandler: emailBlurHandler,//alias\n    reset: resetEmailInput,\n  } = useInput(value =() =>{\n    if (value.match(mailFormat)) {\n      emailFormat = true;\n    }\n  });\n\n  //  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n  // Name State\n  // const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // email state\n // const [enteredEmail, setEnteredEmail] = useState(\"\");\n // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n\n  //const enteredNameIsValid = enteredName.trim() !== \"\";\n  //const nameInputIsnvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false;\n\n  // on Input Name handler\n // const nameInputChangeHandler = (event) => {\n  //  setEnterednName(event.target.value);\n // };\n // const nameInputBlurHandler = (event) => {\n //   setEnteredNameTouched(true);\n // };\n\n  // on Email handler\n let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n // const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n // const emailInputChangeHandler = (event) => {\n  //  setEnteredEmail(event.target.value);\n  //  if (event.target.value.match(mailFormat)) {\n  //    emailFormat = true;\n  //  }\n // };\n  // const emailInputBlurHandler = (event) => {\n  //  setEnteredEmailTouched(true);\n // };\n\n  const emailBoxEmptyTouched = enteredEmailTouched && !enteredEmailIsSpaceFree;\n  const emailInputisRight =\n    emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && enteredEmailIsSpaceFree) {\n    formIsValid = true;\n  }\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    //setEnteredNameTouched(true);\n\n    nameBlurHandler();\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree && !emailInputisRight) {\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName);\n\n   // setEnterednName(\"\");\n   // setEnteredNameTouched(false);\n    resetNameInput();\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n\n    //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailBoxEmptyTouched\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n        \n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      {/* email INPUT*/}\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailBoxEmptyTouched && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}