{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_forms\\\\src\\\\components\\\\SimpleInput.js\",\n    _s = $RefreshSig$();\n\nimport { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SimpleInput = props => {\n  _s();\n\n  // I am using custom hooks that's why commenting out existing states\n  const {\n    value: enteredName,\n    //alias\n    isValid: enteredNameIsValid,\n    //alias\n    hasError: nameInputHasError,\n    //alias\n    valueChangeHandler: nameChangeHandler,\n    //alias\n    inputBlurHandler: nameBlueHandler,\n    //alias\n    reset: nameReset\n  } = useInput(); //  const fetchValue = useRef();\n  // console.log(fetchValue);\n  // Name State\n  // const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n  // email state\n\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false); // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n  //const enteredNameIsValid = enteredName.trim() !== \"\";\n  //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n\n  let formIsValid = false; // on Input Name handler\n\n  const nameInputChangeHandler = event => {\n    setEnterednName(event.target.value);\n  };\n\n  const nameInputBlurHandler = event => {\n    setEnteredNameTouched(true);\n  }; // on Email handler\n\n\n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n\n  const emailInputChangeHandler = event => {\n    setEnteredEmail(event.target.value);\n\n    if (event.target.value.match(mailFormat)) {\n      emailFormat = true;\n      console.log(\"here\");\n    }\n  };\n\n  const emailInputBlurHandler = event => {\n    setEnteredEmailTouched(true);\n  };\n\n  const emailBoxEmptyTouched = enteredEmailTouched && !enteredEmailIsSpaceFree;\n  const emailInputisRight = emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && enteredEmailIsSpaceFree) {\n    formIsValid = true;\n  } // form- submission\n\n\n  const formSubmissionHandler = event => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree && !emailInputisRight) {\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName);\n    setEnterednName(\"\");\n    setEnteredNameTouched(false);\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false); //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid ? \"form-control invalid\" : \"form-control\";\n  const emailInputClasses = emailBoxEmptyTouched ? \"form-control invalid\" : \"form-control\";\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: formSubmissionHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: nameInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: fetchValue,\n        onChange: nameInputChangeHandler,\n        onBlur: nameInputBlurHandler,\n        value: enteredName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), nameInputIsInvalid && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Name must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: emailInputClasses,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Email\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        id: \"email\",\n        onChange: emailInputChangeHandler,\n        onBlur: emailInputBlurHandler,\n        value: enteredEmail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), emailBoxEmptyTouched && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error-text\",\n        children: \"Email must not be empty\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-actions\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        disabled: !formIsValid,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SimpleInput, \"s1nIAWV640ZgxftVM8rPHfH+JSo=\", false, function () {\n  return [useInput];\n});\n\n_c = SimpleInput;\nexport default SimpleInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"SimpleInput\");","map":{"version":3,"names":["useRef","useState","useInput","SimpleInput","props","value","enteredName","isValid","enteredNameIsValid","hasError","nameInputHasError","valueChangeHandler","nameChangeHandler","inputBlurHandler","nameBlueHandler","reset","nameReset","enteredEmail","setEnteredEmail","enteredEmailTouched","setEnteredEmailTouched","formIsValid","nameInputChangeHandler","event","setEnterednName","target","nameInputBlurHandler","setEnteredNameTouched","emailFormat","enteredEmailIsSpaceFree","trim","mailFormat","emailInputChangeHandler","match","console","log","emailInputBlurHandler","emailBoxEmptyTouched","emailInputisRight","formSubmissionHandler","preventDefault","nameInputClasses","nameInputIsInvalid","emailInputClasses","fetchValue"],"sources":["D:/React_forms/src/components/SimpleInput.js"],"sourcesContent":["import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  // I am using custom hooks that's why commenting out existing states\n\n  const {\n    value: enteredName, //alias\n    isValid: enteredNameIsValid,   //alias\n    hasError: nameInputHasError, //alias\n    valueChangeHandler: nameChangeHandler, //alias\n    inputBlurHandler: nameBlueHandler,//alias\n    reset: nameReset,\n  } = useInput();\n\n  //  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n  // Name State\n  // const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // email state\n  const [enteredEmail, setEnteredEmail] = useState(\"\");\n  const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n\n  //const enteredNameIsValid = enteredName.trim() !== \"\";\n  //const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false;\n\n  // on Input Name handler\n  const nameInputChangeHandler = (event) => {\n    setEnterednName(event.target.value);\n  };\n  const nameInputBlurHandler = (event) => {\n    setEnteredNameTouched(true);\n  };\n\n  // on Email handler\n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const emailInputChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n    if (event.target.value.match(mailFormat)) {\n      emailFormat = true;\n      console.log(\"here\");\n    }\n  };\n  const emailInputBlurHandler = (event) => {\n    setEnteredEmailTouched(true);\n  };\n\n  const emailBoxEmptyTouched = enteredEmailTouched && !enteredEmailIsSpaceFree;\n  const emailInputisRight =\n    emailFormat && enteredEmailIsSpaceFree && enteredEmailTouched;\n\n  if (enteredNameIsValid && enteredEmailIsSpaceFree) {\n    formIsValid = true;\n  }\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    setEnteredNameTouched(true);\n    setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree && !emailInputisRight) {\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName);\n\n    setEnterednName(\"\");\n    setEnteredNameTouched(false);\n\n    setEnteredEmail(\"\");\n    setEnteredEmailTouched(false);\n\n    //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputIsInvalid\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailBoxEmptyTouched\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          ref={fetchValue}\n          onChange={nameInputChangeHandler}\n          onBlur={nameInputBlurHandler}\n          value={enteredName}\n        />\n        {nameInputIsInvalid && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      {/* email INPUT*/}\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailInputChangeHandler}\n          onBlur={emailInputBlurHandler}\n          value={enteredEmail}\n        />\n        {emailBoxEmptyTouched && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}