[{"D:\\React_forms\\src\\index.js":"1","D:\\React_forms\\src\\App.js":"2","D:\\React_forms\\src\\components\\SimpleInput.js":"3","D:\\React_forms\\src\\hooks\\use-input.js":"4","D:\\React_forms\\src\\components\\BasicForm.js":"5"},{"size":179,"mtime":1648643023000,"results":"6","hashOfConfig":"7"},{"size":162,"mtime":1658294674254,"results":"8","hashOfConfig":"7"},{"size":4501,"mtime":1658307736616,"results":"9","hashOfConfig":"7"},{"size":1734,"mtime":1658307357540,"results":"10","hashOfConfig":"7"},{"size":3175,"mtime":1658309764501,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"12x4icl",{"filePath":"15","messages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\React_forms\\src\\index.js",[],["24","25"],"D:\\React_forms\\src\\App.js",[],"D:\\React_forms\\src\\components\\SimpleInput.js",["26","27","28","29","30","31"],"import { useRef, useState } from \"react\";\nimport useInput from \"../hooks/use-input\";\n\nconst SimpleInput = (props) => {\n  // I am using custom hooks that's why commenting out existing states\n\n  const {\n    value: enteredName, //alias\n    isValid: enteredNameIsValid, //alias\n    hasError: nameInputHasError, //alias\n    valueChangeHandler: nameChangeHandler, //alias\n    inputBlurHandler: nameBlurHandler, //alias\n    reset: resetNameInput,\n  } = useInput((value) => value.trim() !== \"\");\n\n\n  // using cutom hook for mail validation\n\n  const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  const {\n    value: enteredEmail, //alias\n    isValid: enteredEmailIsValid, //alias\n    hasError: emailInputHasError, //alias\n    valueChangeHandler: emailChangeHandler, //alias\n    inputBlurHandler: emailBlurHandler, //alias\n    reset: resetEmailInput,\n  } = useInput(\n    ((value) => value.includes('@'))\n  );\n\n  //  const fetchValue = useRef();\n  // console.log(fetchValue);\n\n  // Name State\n  // const [enteredName, setEnterednName] = useState(\"\");\n  // optional -  const [enteredNameIsValid, setEnterednNameIsValid] = useState(false);\n  // const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n\n  // email state\n  // const [enteredEmail, setEnteredEmail] = useState(\"\");\n  // const [enteredEmailTouched, setEnteredEmailTouched] = useState(false);\n\n  // use one more state to check if the form is valid\n  // if one field is not correct means it is invalid\n  //const [formIsValid, setFormIsValid] = useState(false);\n\n  //const enteredNameIsValid = enteredName.trim() !== \"\";\n  //const nameInputIsnvalid = !enteredNameIsValid && enteredNameTouched;\n  let formIsValid = false;\n\n  // on Input Name handler\n  // const nameInputChangeHandler = (event) => {\n  //  setEnterednName(event.target.value);\n  // };\n  // const nameInputBlurHandler = (event) => {\n  //   setEnteredNameTouched(true);\n  // };\n\n  // on Email handler\n  let emailFormat = false;\n  const enteredEmailIsSpaceFree = enteredEmail.trim() !== \"\";\n  // const mailFormat = /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\n  // const emailInputChangeHandler = (event) => {\n  //  setEnteredEmail(event.target.value);\n  //  if (event.target.value.match(mailFormat)) {\n  //    emailFormat = true;\n  //  }\n  // };\n  // const emailInputBlurHandler = (event) => {\n  //  setEnteredEmailTouched(true);\n  // };\n\n // const emailBoxEmptyTouched = enteredEmailTouched && !enteredEmailIsSpaceFree;\n  const emailInputisRight =\n    emailFormat && enteredEmailIsSpaceFree && emailInputHasError;\n\n  if (nameInputHasError && emailInputHasError) {\n    formIsValid = true;\n  }\n\n  // form- submission\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    //setEnteredNameTouched(true);\n\n    nameBlurHandler();\n    emailBlurHandler();\n    //setEnteredEmailTouched(true);\n\n    if (!enteredNameIsValid && !enteredEmailIsSpaceFree && !emailInputisRight) {\n      return;\n    }\n\n    console.log(enteredEmail);\n    console.log(enteredName);\n\n    // setEnterednName(\"\");\n    // setEnteredNameTouched(false);\n    resetNameInput();\n    resetEmailInput();\n    //setEnteredEmail(\"\");\n    //setEnteredEmailTouched(false);\n\n    //setEnterednNameIsValid(true);\n    // useref\n    // const enteredValue = fetchValue.current.value;\n    // console.log(enteredValue);\n  };\n\n  const nameInputClasses = nameInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  const emailInputClasses = emailInputHasError\n    ? \"form-control invalid\"\n    : \"form-control\";\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor=\"name\">Your Name</label>\n        <input\n          type=\"text\"\n          id=\"name\"\n          onChange={nameChangeHandler}\n          onBlur={nameBlurHandler}\n          value={enteredName}\n        />\n        {nameInputHasError && (\n          <p className=\"error-text\">Name must not be empty</p>\n        )}\n      </div>\n\n      {/* email INPUT*/}\n\n      <div className={emailInputClasses}>\n        <label htmlFor=\"name\">Your Email</label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          onChange={emailChangeHandler}\n          onBlur={emailBlurHandler}\n          value={enteredEmail}\n        />\n        {emailInputHasError && (\n          <p className=\"error-text\">Email must not be empty</p>\n        )}\n      </div>\n\n      <div className=\"form-actions\">\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\n\nexport default SimpleInput;\n","D:\\React_forms\\src\\hooks\\use-input.js",[],"D:\\React_forms\\src\\components\\BasicForm.js",["32","33"],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":1,"column":10,"nodeType":"40","messageId":"41","endLine":1,"endColumn":16},{"ruleId":"38","severity":1,"message":"42","line":1,"column":18,"nodeType":"40","messageId":"41","endLine":1,"endColumn":26},{"ruleId":"38","severity":1,"message":"43","line":19,"column":9,"nodeType":"40","messageId":"41","endLine":19,"endColumn":19},{"ruleId":"44","severity":1,"message":"45","line":19,"column":29,"nodeType":"46","messageId":"47","endLine":19,"endColumn":30,"suggestions":"48"},{"ruleId":"44","severity":1,"message":"45","line":19,"column":45,"nodeType":"46","messageId":"47","endLine":19,"endColumn":46,"suggestions":"49"},{"ruleId":"38","severity":1,"message":"50","line":22,"column":14,"nodeType":"40","messageId":"41","endLine":22,"endColumn":33},{"ruleId":"44","severity":1,"message":"45","line":22,"column":29,"nodeType":"46","messageId":"47","endLine":22,"endColumn":30,"suggestions":"51"},{"ruleId":"44","severity":1,"message":"45","line":22,"column":45,"nodeType":"46","messageId":"47","endLine":22,"endColumn":46,"suggestions":"52"},"no-native-reassign",["53"],"no-negated-in-lhs",["54"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'mailFormat' is assigned a value but never used.","no-useless-escape","Unnecessary escape character: \\..","Literal","unnecessaryEscape",["55","56"],["57","58"],"'enteredEmailIsValid' is assigned a value but never used.",["59","60"],["61","62"],"no-global-assign","no-unsafe-negation",{"messageId":"63","fix":"64","desc":"65"},{"messageId":"66","fix":"67","desc":"68"},{"messageId":"63","fix":"69","desc":"65"},{"messageId":"66","fix":"70","desc":"68"},{"messageId":"63","fix":"71","desc":"65"},{"messageId":"66","fix":"72","desc":"68"},{"messageId":"63","fix":"73","desc":"65"},{"messageId":"66","fix":"74","desc":"68"},"removeEscape",{"range":"75","text":"76"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"77","text":"78"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"79","text":"76"},{"range":"80","text":"78"},{"range":"81","text":"76"},{"range":"82","text":"78"},{"range":"83","text":"76"},{"range":"84","text":"78"},[561,562],"",[561,561],"\\",[577,578],[577,577],[647,648],[647,647],[663,664],[663,663]]